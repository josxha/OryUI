/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Client.Client;
using Client.Client.Auth;
using Client.Model;

namespace Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        OAuth2RedirectTo AcceptOAuth2ConsentRequest(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0);

        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        ApiResponse<OAuth2RedirectTo> AcceptOAuth2ConsentRequestWithHttpInfo(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0);
        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        OAuth2RedirectTo AcceptOAuth2LoginRequest(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0);

        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        ApiResponse<OAuth2RedirectTo> AcceptOAuth2LoginRequestWithHttpInfo(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0);
        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        OAuth2RedirectTo AcceptOAuth2LogoutRequest(string logoutChallenge, int operationIndex = 0);

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        ApiResponse<OAuth2RedirectTo> AcceptOAuth2LogoutRequestWithHttpInfo(string logoutChallenge, int operationIndex = 0);
        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        OAuth2Client CreateOAuth2Client(OAuth2Client oAuth2Client, int operationIndex = 0);

        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        ApiResponse<OAuth2Client> CreateOAuth2ClientWithHttpInfo(OAuth2Client oAuth2Client, int operationIndex = 0);
        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOAuth2Client(string id, int operationIndex = 0);

        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ClientWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOAuth2Token(string clientId, int operationIndex = 0);

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2TokenWithHttpInfo(string clientId, int operationIndex = 0);
        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTrustedOAuth2JwtGrantIssuer(string id, int operationIndex = 0);

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        OAuth2Client GetOAuth2Client(string id, int operationIndex = 0);

        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        ApiResponse<OAuth2Client> GetOAuth2ClientWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2ConsentRequest</returns>
        OAuth2ConsentRequest GetOAuth2ConsentRequest(string consentChallenge, int operationIndex = 0);

        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2ConsentRequest</returns>
        ApiResponse<OAuth2ConsentRequest> GetOAuth2ConsentRequestWithHttpInfo(string consentChallenge, int operationIndex = 0);
        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2LoginRequest</returns>
        OAuth2LoginRequest GetOAuth2LoginRequest(string loginChallenge, int operationIndex = 0);

        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2LoginRequest</returns>
        ApiResponse<OAuth2LoginRequest> GetOAuth2LoginRequestWithHttpInfo(string loginChallenge, int operationIndex = 0);
        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2LogoutRequest</returns>
        OAuth2LogoutRequest GetOAuth2LogoutRequest(string logoutChallenge, int operationIndex = 0);

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2LogoutRequest</returns>
        ApiResponse<OAuth2LogoutRequest> GetOAuth2LogoutRequestWithHttpInfo(string logoutChallenge, int operationIndex = 0);
        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustedOAuth2JwtGrantIssuer</returns>
        TrustedOAuth2JwtGrantIssuer GetTrustedOAuth2JwtGrantIssuer(string id, int operationIndex = 0);

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustedOAuth2JwtGrantIssuer</returns>
        ApiResponse<TrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IntrospectedOAuth2Token</returns>
        IntrospectedOAuth2Token IntrospectOAuth2Token(string token, string? scope = default(string?), int operationIndex = 0);

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IntrospectedOAuth2Token</returns>
        ApiResponse<IntrospectedOAuth2Token> IntrospectOAuth2TokenWithHttpInfo(string token, string? scope = default(string?), int operationIndex = 0);
        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        List<OAuth2Client> ListOAuth2Clients(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0);

        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        ApiResponse<List<OAuth2Client>> ListOAuth2ClientsWithHttpInfo(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0);
        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OAuth2ConsentSession&gt;</returns>
        List<OAuth2ConsentSession> ListOAuth2ConsentSessions(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OAuth2ConsentSession&gt;</returns>
        ApiResponse<List<OAuth2ConsentSession>> ListOAuth2ConsentSessionsWithHttpInfo(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrustedOAuth2JwtGrantIssuer&gt;</returns>
        List<TrustedOAuth2JwtGrantIssuer> ListTrustedOAuth2JwtGrantIssuers(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrustedOAuth2JwtGrantIssuer&gt;</returns>
        ApiResponse<List<TrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfo(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0);
        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ErrorOAuth2</returns>
        ErrorOAuth2 OAuth2Authorize(int operationIndex = 0);

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ErrorOAuth2</returns>
        ApiResponse<ErrorOAuth2> OAuth2AuthorizeWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2TokenExchange</returns>
        OAuth2TokenExchange Oauth2TokenExchange(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2TokenExchange</returns>
        ApiResponse<OAuth2TokenExchange> Oauth2TokenExchangeWithHttpInfo(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        OAuth2Client PatchOAuth2Client(string id, List<JsonPatch> jsonPatch, int operationIndex = 0);

        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        ApiResponse<OAuth2Client> PatchOAuth2ClientWithHttpInfo(string id, List<JsonPatch> jsonPatch, int operationIndex = 0);
        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        OAuth2RedirectTo RejectOAuth2ConsentRequest(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0);

        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        ApiResponse<OAuth2RedirectTo> RejectOAuth2ConsentRequestWithHttpInfo(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0);
        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        OAuth2RedirectTo RejectOAuth2LoginRequest(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0);

        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        ApiResponse<OAuth2RedirectTo> RejectOAuth2LoginRequestWithHttpInfo(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0);
        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RejectOAuth2LogoutRequest(string logoutChallenge, int operationIndex = 0);

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectOAuth2LogoutRequestWithHttpInfo(string logoutChallenge, int operationIndex = 0);
        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RevokeOAuth2ConsentSessions(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2ConsentSessionsWithHttpInfo(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RevokeOAuth2LoginSessions(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0);

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2LoginSessionsWithHttpInfo(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0);
        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RevokeOAuth2Token(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0);

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2TokenWithHttpInfo(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0);
        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        OAuth2Client SetOAuth2Client(string id, OAuth2Client oAuth2Client, int operationIndex = 0);

        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        ApiResponse<OAuth2Client> SetOAuth2ClientWithHttpInfo(string id, OAuth2Client oAuth2Client, int operationIndex = 0);
        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        OAuth2Client SetOAuth2ClientLifespans(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0);

        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        ApiResponse<OAuth2Client> SetOAuth2ClientLifespansWithHttpInfo(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0);
        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustedOAuth2JwtGrantIssuer</returns>
        TrustedOAuth2JwtGrantIssuer TrustOAuth2JwtGrantIssuer(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0);

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustedOAuth2JwtGrantIssuer</returns>
        ApiResponse<TrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerWithHttpInfo(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<OAuth2RedirectTo> AcceptOAuth2ConsentRequestAsync(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RedirectTo>> AcceptOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<OAuth2RedirectTo> AcceptOAuth2LoginRequestAsync(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RedirectTo>> AcceptOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<OAuth2RedirectTo> AcceptOAuth2LogoutRequestAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RedirectTo>> AcceptOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        System.Threading.Tasks.Task<OAuth2Client> CreateOAuth2ClientAsync(OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Client>> CreateOAuth2ClientWithHttpInfoAsync(OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ClientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ClientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2TokenAsync(string clientId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2TokenWithHttpInfoAsync(string clientId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTrustedOAuth2JwtGrantIssuerAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        System.Threading.Tasks.Task<OAuth2Client> GetOAuth2ClientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Client>> GetOAuth2ClientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2ConsentRequest</returns>
        System.Threading.Tasks.Task<OAuth2ConsentRequest> GetOAuth2ConsentRequestAsync(string consentChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2ConsentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2ConsentRequest>> GetOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2LoginRequest</returns>
        System.Threading.Tasks.Task<OAuth2LoginRequest> GetOAuth2LoginRequestAsync(string loginChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2LoginRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2LoginRequest>> GetOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2LogoutRequest</returns>
        System.Threading.Tasks.Task<OAuth2LogoutRequest> GetOAuth2LogoutRequestAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2LogoutRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2LogoutRequest>> GetOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustedOAuth2JwtGrantIssuer</returns>
        System.Threading.Tasks.Task<TrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustedOAuth2JwtGrantIssuer)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOAuth2JwtGrantIssuer>> GetTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntrospectedOAuth2Token</returns>
        System.Threading.Tasks.Task<IntrospectedOAuth2Token> IntrospectOAuth2TokenAsync(string token, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntrospectedOAuth2Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntrospectedOAuth2Token>> IntrospectOAuth2TokenWithHttpInfoAsync(string token, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Client>> ListOAuth2ClientsAsync(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Client>>> ListOAuth2ClientsWithHttpInfoAsync(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2ConsentSession&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2ConsentSession>> ListOAuth2ConsentSessionsAsync(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2ConsentSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2ConsentSession>>> ListOAuth2ConsentSessionsWithHttpInfoAsync(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrustedOAuth2JwtGrantIssuer&gt;</returns>
        System.Threading.Tasks.Task<List<TrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrustedOAuth2JwtGrantIssuer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrustedOAuth2JwtGrantIssuer>>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfoAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErrorOAuth2</returns>
        System.Threading.Tasks.Task<ErrorOAuth2> OAuth2AuthorizeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErrorOAuth2)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErrorOAuth2>> OAuth2AuthorizeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2TokenExchange</returns>
        System.Threading.Tasks.Task<OAuth2TokenExchange> Oauth2TokenExchangeAsync(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2TokenExchange)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2TokenExchange>> Oauth2TokenExchangeWithHttpInfoAsync(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        System.Threading.Tasks.Task<OAuth2Client> PatchOAuth2ClientAsync(string id, List<JsonPatch> jsonPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Client>> PatchOAuth2ClientWithHttpInfoAsync(string id, List<JsonPatch> jsonPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<OAuth2RedirectTo> RejectOAuth2ConsentRequestAsync(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RedirectTo>> RejectOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<OAuth2RedirectTo> RejectOAuth2LoginRequestAsync(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RedirectTo>> RejectOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectOAuth2LogoutRequestAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2ConsentSessionsAsync(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2ConsentSessionsWithHttpInfoAsync(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2LoginSessionsAsync(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2LoginSessionsWithHttpInfoAsync(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2TokenAsync(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokenWithHttpInfoAsync(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        System.Threading.Tasks.Task<OAuth2Client> SetOAuth2ClientAsync(string id, OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Client>> SetOAuth2ClientWithHttpInfoAsync(string id, OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        System.Threading.Tasks.Task<OAuth2Client> SetOAuth2ClientLifespansAsync(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Client>> SetOAuth2ClientLifespansWithHttpInfoAsync(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustedOAuth2JwtGrantIssuer</returns>
        System.Threading.Tasks.Task<TrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerAsync(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustedOAuth2JwtGrantIssuer)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOAuth2JwtGrantIssuer>> TrustOAuth2JwtGrantIssuerWithHttpInfoAsync(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth2Api : IOAuth2ApiSync, IOAuth2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuth2Api : IOAuth2Api
    {
        private Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuth2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuth2Api(string basePath)
        {
            this.Configuration = Client.Client.Configuration.MergeConfigurations(
                Client.Client.GlobalConfiguration.Instance,
                new Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuth2Api(Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Client.Client.Configuration.MergeConfigurations(
                Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OAuth2Api(Client.Client.ISynchronousClient client, Client.Client.IAsynchronousClient asyncClient, Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        public OAuth2RedirectTo AcceptOAuth2ConsentRequest(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = AcceptOAuth2ConsentRequestWithHttpInfo(consentChallenge, acceptOAuth2ConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        public Client.Client.ApiResponse<OAuth2RedirectTo> AcceptOAuth2ConsentRequestWithHttpInfo(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->AcceptOAuth2ConsentRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = acceptOAuth2ConsentRequest;

            localVarRequestOptions.Operation = "OAuth2Api.AcceptOAuth2ConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<OAuth2RedirectTo> AcceptOAuth2ConsentRequestAsync(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = await AcceptOAuth2ConsentRequestWithHttpInfoAsync(consentChallenge, acceptOAuth2ConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="acceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2RedirectTo>> AcceptOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, AcceptOAuth2ConsentRequest? acceptOAuth2ConsentRequest = default(AcceptOAuth2ConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->AcceptOAuth2ConsentRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = acceptOAuth2ConsentRequest;

            localVarRequestOptions.Operation = "OAuth2Api.AcceptOAuth2ConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        public OAuth2RedirectTo AcceptOAuth2LoginRequest(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = AcceptOAuth2LoginRequestWithHttpInfo(loginChallenge, acceptOAuth2LoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        public Client.Client.ApiResponse<OAuth2RedirectTo> AcceptOAuth2LoginRequestWithHttpInfo(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->AcceptOAuth2LoginRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = acceptOAuth2LoginRequest;

            localVarRequestOptions.Operation = "OAuth2Api.AcceptOAuth2LoginRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2RedirectTo>("/admin/oauth2/auth/requests/login/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<OAuth2RedirectTo> AcceptOAuth2LoginRequestAsync(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = await AcceptOAuth2LoginRequestWithHttpInfoAsync(loginChallenge, acceptOAuth2LoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="acceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2RedirectTo>> AcceptOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, AcceptOAuth2LoginRequest? acceptOAuth2LoginRequest = default(AcceptOAuth2LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->AcceptOAuth2LoginRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = acceptOAuth2LoginRequest;

            localVarRequestOptions.Operation = "OAuth2Api.AcceptOAuth2LoginRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2RedirectTo>("/admin/oauth2/auth/requests/login/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        public OAuth2RedirectTo AcceptOAuth2LogoutRequest(string logoutChallenge, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = AcceptOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        public Client.Client.ApiResponse<OAuth2RedirectTo> AcceptOAuth2LogoutRequestWithHttpInfo(string logoutChallenge, int operationIndex = 0)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->AcceptOAuth2LogoutRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.AcceptOAuth2LogoutRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2RedirectTo>("/admin/oauth2/auth/requests/logout/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<OAuth2RedirectTo> AcceptOAuth2LogoutRequestAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = await AcceptOAuth2LogoutRequestWithHttpInfoAsync(logoutChallenge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2RedirectTo>> AcceptOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->AcceptOAuth2LogoutRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.AcceptOAuth2LogoutRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2RedirectTo>("/admin/oauth2/auth/requests/logout/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        public OAuth2Client CreateOAuth2Client(OAuth2Client oAuth2Client, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = CreateOAuth2ClientWithHttpInfo(oAuth2Client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        public Client.Client.ApiResponse<OAuth2Client> CreateOAuth2ClientWithHttpInfo(OAuth2Client oAuth2Client, int operationIndex = 0)
        {
            // verify the required parameter 'oAuth2Client' is set
            if (oAuth2Client == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'oAuth2Client' when calling OAuth2Api->CreateOAuth2Client");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = oAuth2Client;

            localVarRequestOptions.Operation = "OAuth2Api.CreateOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2Client>("/admin/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        public async System.Threading.Tasks.Task<OAuth2Client> CreateOAuth2ClientAsync(OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = await CreateOAuth2ClientWithHttpInfoAsync(oAuth2Client, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2Client>> CreateOAuth2ClientWithHttpInfoAsync(OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'oAuth2Client' is set
            if (oAuth2Client == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'oAuth2Client' when calling OAuth2Api->CreateOAuth2Client");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = oAuth2Client;

            localVarRequestOptions.Operation = "OAuth2Api.CreateOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2Client>("/admin/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOAuth2Client(string id, int operationIndex = 0)
        {
            DeleteOAuth2ClientWithHttpInfo(id);
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> DeleteOAuth2ClientWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteOAuth2Client");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.DeleteOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ClientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2ClientWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> DeleteOAuth2ClientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteOAuth2Client");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.DeleteOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOAuth2Token(string clientId, int operationIndex = 0)
        {
            DeleteOAuth2TokenWithHttpInfo(clientId);
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> DeleteOAuth2TokenWithHttpInfo(string clientId, int operationIndex = 0)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth2Api->DeleteOAuth2Token");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));

            localVarRequestOptions.Operation = "OAuth2Api.DeleteOAuth2Token";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/oauth2/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2TokenAsync(string clientId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2TokenWithHttpInfoAsync(clientId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> DeleteOAuth2TokenWithHttpInfoAsync(string clientId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth2Api->DeleteOAuth2Token");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));

            localVarRequestOptions.Operation = "OAuth2Api.DeleteOAuth2Token";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/oauth2/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTrustedOAuth2JwtGrantIssuer(string id, int operationIndex = 0)
        {
            DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteTrustedOAuth2JwtGrantIssuer");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.DeleteTrustedOAuth2JwtGrantIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTrustedOAuth2JwtGrantIssuerAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteTrustedOAuth2JwtGrantIssuer");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.DeleteTrustedOAuth2JwtGrantIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        public OAuth2Client GetOAuth2Client(string id, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = GetOAuth2ClientWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        public Client.Client.ApiResponse<OAuth2Client> GetOAuth2ClientWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetOAuth2Client");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        public async System.Threading.Tasks.Task<OAuth2Client> GetOAuth2ClientAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = await GetOAuth2ClientWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2Client>> GetOAuth2ClientWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetOAuth2Client");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2ConsentRequest</returns>
        public OAuth2ConsentRequest GetOAuth2ConsentRequest(string consentChallenge, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2ConsentRequest> localVarResponse = GetOAuth2ConsentRequestWithHttpInfo(consentChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2ConsentRequest</returns>
        public Client.Client.ApiResponse<OAuth2ConsentRequest> GetOAuth2ConsentRequestWithHttpInfo(string consentChallenge, int operationIndex = 0)
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->GetOAuth2ConsentRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2ConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2ConsentRequest>("/admin/oauth2/auth/requests/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2ConsentRequest</returns>
        public async System.Threading.Tasks.Task<OAuth2ConsentRequest> GetOAuth2ConsentRequestAsync(string consentChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2ConsentRequest> localVarResponse = await GetOAuth2ConsentRequestWithHttpInfoAsync(consentChallenge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2ConsentRequest)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2ConsentRequest>> GetOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->GetOAuth2ConsentRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2ConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2ConsentRequest>("/admin/oauth2/auth/requests/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2LoginRequest</returns>
        public OAuth2LoginRequest GetOAuth2LoginRequest(string loginChallenge, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2LoginRequest> localVarResponse = GetOAuth2LoginRequestWithHttpInfo(loginChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2LoginRequest</returns>
        public Client.Client.ApiResponse<OAuth2LoginRequest> GetOAuth2LoginRequestWithHttpInfo(string loginChallenge, int operationIndex = 0)
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->GetOAuth2LoginRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2LoginRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2LoginRequest>("/admin/oauth2/auth/requests/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2LoginRequest</returns>
        public async System.Threading.Tasks.Task<OAuth2LoginRequest> GetOAuth2LoginRequestAsync(string loginChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2LoginRequest> localVarResponse = await GetOAuth2LoginRequestWithHttpInfoAsync(loginChallenge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2LoginRequest)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2LoginRequest>> GetOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->GetOAuth2LoginRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2LoginRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2LoginRequest>("/admin/oauth2/auth/requests/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2LogoutRequest</returns>
        public OAuth2LogoutRequest GetOAuth2LogoutRequest(string logoutChallenge, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2LogoutRequest> localVarResponse = GetOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2LogoutRequest</returns>
        public Client.Client.ApiResponse<OAuth2LogoutRequest> GetOAuth2LogoutRequestWithHttpInfo(string logoutChallenge, int operationIndex = 0)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->GetOAuth2LogoutRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2LogoutRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2LogoutRequest>("/admin/oauth2/auth/requests/logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2LogoutRequest</returns>
        public async System.Threading.Tasks.Task<OAuth2LogoutRequest> GetOAuth2LogoutRequestAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2LogoutRequest> localVarResponse = await GetOAuth2LogoutRequestWithHttpInfoAsync(logoutChallenge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2LogoutRequest)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2LogoutRequest>> GetOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->GetOAuth2LogoutRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.GetOAuth2LogoutRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2LogoutRequest>("/admin/oauth2/auth/requests/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustedOAuth2JwtGrantIssuer</returns>
        public TrustedOAuth2JwtGrantIssuer GetTrustedOAuth2JwtGrantIssuer(string id, int operationIndex = 0)
        {
            Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer> localVarResponse = GetTrustedOAuth2JwtGrantIssuerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustedOAuth2JwtGrantIssuer</returns>
        public Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetTrustedOAuth2JwtGrantIssuer");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.GetTrustedOAuth2JwtGrantIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustedOAuth2JwtGrantIssuer</returns>
        public async System.Threading.Tasks.Task<TrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer> localVarResponse = await GetTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustedOAuth2JwtGrantIssuer)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer>> GetTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetTrustedOAuth2JwtGrantIssuer");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OAuth2Api.GetTrustedOAuth2JwtGrantIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IntrospectedOAuth2Token</returns>
        public IntrospectedOAuth2Token IntrospectOAuth2Token(string token, string? scope = default(string?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<IntrospectedOAuth2Token> localVarResponse = IntrospectOAuth2TokenWithHttpInfo(token, scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IntrospectedOAuth2Token</returns>
        public Client.Client.ApiResponse<IntrospectedOAuth2Token> IntrospectOAuth2TokenWithHttpInfo(string token, string? scope = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->IntrospectOAuth2Token");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Client.Client.ClientUtils.ParameterToString(token)); // form parameter

            localVarRequestOptions.Operation = "OAuth2Api.IntrospectOAuth2Token";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IntrospectedOAuth2Token>("/admin/oauth2/introspect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntrospectedOAuth2Token</returns>
        public async System.Threading.Tasks.Task<IntrospectedOAuth2Token> IntrospectOAuth2TokenAsync(string token, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<IntrospectedOAuth2Token> localVarResponse = await IntrospectOAuth2TokenWithHttpInfoAsync(token, scope, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntrospectedOAuth2Token)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<IntrospectedOAuth2Token>> IntrospectOAuth2TokenWithHttpInfoAsync(string token, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->IntrospectOAuth2Token");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Client.Client.ClientUtils.ParameterToString(token)); // form parameter

            localVarRequestOptions.Operation = "OAuth2Api.IntrospectOAuth2Token";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IntrospectedOAuth2Token>("/admin/oauth2/introspect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        public List<OAuth2Client> ListOAuth2Clients(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<List<OAuth2Client>> localVarResponse = ListOAuth2ClientsWithHttpInfo(pageSize, pageToken, clientName, owner);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        public Client.Client.ApiResponse<List<OAuth2Client>> ListOAuth2ClientsWithHttpInfo(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0)
        {
            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "client_name", clientName));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }

            localVarRequestOptions.Operation = "OAuth2Api.ListOAuth2Clients";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2Client>>("/admin/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Clients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Client>> ListOAuth2ClientsAsync(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<List<OAuth2Client>> localVarResponse = await ListOAuth2ClientsWithHttpInfoAsync(pageSize, pageToken, clientName, owner, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<List<OAuth2Client>>> ListOAuth2ClientsWithHttpInfoAsync(long? pageSize = default(long?), string? pageToken = default(string?), string? clientName = default(string?), string? owner = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "client_name", clientName));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }

            localVarRequestOptions.Operation = "OAuth2Api.ListOAuth2Clients";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2Client>>("/admin/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Clients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OAuth2ConsentSession&gt;</returns>
        public List<OAuth2ConsentSession> ListOAuth2ConsentSessions(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<List<OAuth2ConsentSession>> localVarResponse = ListOAuth2ConsentSessionsWithHttpInfo(subject, pageSize, pageToken, loginSessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OAuth2ConsentSession&gt;</returns>
        public Client.Client.ApiResponse<List<OAuth2ConsentSession>> ListOAuth2ConsentSessionsWithHttpInfo(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->ListOAuth2ConsentSessions");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (loginSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_session_id", loginSessionId));
            }

            localVarRequestOptions.Operation = "OAuth2Api.ListOAuth2ConsentSessions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2ConsentSession>>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2ConsentSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2ConsentSession>> ListOAuth2ConsentSessionsAsync(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<List<OAuth2ConsentSession>> localVarResponse = await ListOAuth2ConsentSessionsWithHttpInfoAsync(subject, pageSize, pageToken, loginSessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2ConsentSession&gt;)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<List<OAuth2ConsentSession>>> ListOAuth2ConsentSessionsWithHttpInfoAsync(string subject, long? pageSize = default(long?), string? pageToken = default(string?), string? loginSessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->ListOAuth2ConsentSessions");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (loginSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_session_id", loginSessionId));
            }

            localVarRequestOptions.Operation = "OAuth2Api.ListOAuth2ConsentSessions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2ConsentSession>>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrustedOAuth2JwtGrantIssuer&gt;</returns>
        public List<TrustedOAuth2JwtGrantIssuer> ListTrustedOAuth2JwtGrantIssuers(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<List<TrustedOAuth2JwtGrantIssuer>> localVarResponse = ListTrustedOAuth2JwtGrantIssuersWithHttpInfo(maxItems, defaultItems, issuer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrustedOAuth2JwtGrantIssuer&gt;</returns>
        public Client.Client.ApiResponse<List<TrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfo(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0)
        {
            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "MaxItems", maxItems));
            }
            if (defaultItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "DefaultItems", defaultItems));
            }
            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }

            localVarRequestOptions.Operation = "OAuth2Api.ListTrustedOAuth2JwtGrantIssuers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TrustedOAuth2JwtGrantIssuer>>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrustedOAuth2JwtGrantIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrustedOAuth2JwtGrantIssuer&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<List<TrustedOAuth2JwtGrantIssuer>> localVarResponse = await ListTrustedOAuth2JwtGrantIssuersWithHttpInfoAsync(maxItems, defaultItems, issuer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrustedOAuth2JwtGrantIssuer&gt;)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<List<TrustedOAuth2JwtGrantIssuer>>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfoAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string? issuer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "MaxItems", maxItems));
            }
            if (defaultItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "DefaultItems", defaultItems));
            }
            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }

            localVarRequestOptions.Operation = "OAuth2Api.ListTrustedOAuth2JwtGrantIssuers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TrustedOAuth2JwtGrantIssuer>>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrustedOAuth2JwtGrantIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ErrorOAuth2</returns>
        public ErrorOAuth2 OAuth2Authorize(int operationIndex = 0)
        {
            Client.Client.ApiResponse<ErrorOAuth2> localVarResponse = OAuth2AuthorizeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ErrorOAuth2</returns>
        public Client.Client.ApiResponse<ErrorOAuth2> OAuth2AuthorizeWithHttpInfo(int operationIndex = 0)
        {
            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OAuth2Api.OAuth2Authorize";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ErrorOAuth2>("/oauth2/auth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OAuth2Authorize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErrorOAuth2</returns>
        public async System.Threading.Tasks.Task<ErrorOAuth2> OAuth2AuthorizeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<ErrorOAuth2> localVarResponse = await OAuth2AuthorizeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErrorOAuth2)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<ErrorOAuth2>> OAuth2AuthorizeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OAuth2Api.OAuth2Authorize";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ErrorOAuth2>("/oauth2/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OAuth2Authorize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2TokenExchange</returns>
        public OAuth2TokenExchange Oauth2TokenExchange(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2TokenExchange> localVarResponse = Oauth2TokenExchangeWithHttpInfo(grantType, clientId, code, redirectUri, refreshToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2TokenExchange</returns>
        public Client.Client.ApiResponse<OAuth2TokenExchange> Oauth2TokenExchangeWithHttpInfo(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'grantType' when calling OAuth2Api->Oauth2TokenExchange");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Client.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("grant_type", Client.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Client.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", Client.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }

            localVarRequestOptions.Operation = "OAuth2Api.Oauth2TokenExchange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2TokenExchange>("/oauth2/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2TokenExchange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2TokenExchange</returns>
        public async System.Threading.Tasks.Task<OAuth2TokenExchange> Oauth2TokenExchangeAsync(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2TokenExchange> localVarResponse = await Oauth2TokenExchangeWithHttpInfoAsync(grantType, clientId, code, redirectUri, refreshToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2TokenExchange)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2TokenExchange>> Oauth2TokenExchangeWithHttpInfoAsync(string grantType, string? clientId = default(string?), string? code = default(string?), string? redirectUri = default(string?), string? refreshToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'grantType' when calling OAuth2Api->Oauth2TokenExchange");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Client.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("grant_type", Client.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Client.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", Client.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }

            localVarRequestOptions.Operation = "OAuth2Api.Oauth2TokenExchange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2TokenExchange>("/oauth2/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2TokenExchange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        public OAuth2Client PatchOAuth2Client(string id, List<JsonPatch> jsonPatch, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = PatchOAuth2ClientWithHttpInfo(id, jsonPatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        public Client.Client.ApiResponse<OAuth2Client> PatchOAuth2ClientWithHttpInfo(string id, List<JsonPatch> jsonPatch, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->PatchOAuth2Client");
            }

            // verify the required parameter 'jsonPatch' is set
            if (jsonPatch == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'jsonPatch' when calling OAuth2Api->PatchOAuth2Client");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jsonPatch;

            localVarRequestOptions.Operation = "OAuth2Api.PatchOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<OAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        public async System.Threading.Tasks.Task<OAuth2Client> PatchOAuth2ClientAsync(string id, List<JsonPatch> jsonPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = await PatchOAuth2ClientWithHttpInfoAsync(id, jsonPatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="jsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2Client>> PatchOAuth2ClientWithHttpInfoAsync(string id, List<JsonPatch> jsonPatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->PatchOAuth2Client");
            }

            // verify the required parameter 'jsonPatch' is set
            if (jsonPatch == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'jsonPatch' when calling OAuth2Api->PatchOAuth2Client");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jsonPatch;

            localVarRequestOptions.Operation = "OAuth2Api.PatchOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<OAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        public OAuth2RedirectTo RejectOAuth2ConsentRequest(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = RejectOAuth2ConsentRequestWithHttpInfo(consentChallenge, rejectOAuth2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        public Client.Client.ApiResponse<OAuth2RedirectTo> RejectOAuth2ConsentRequestWithHttpInfo(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0)
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->RejectOAuth2ConsentRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = rejectOAuth2Request;

            localVarRequestOptions.Operation = "OAuth2Api.RejectOAuth2ConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<OAuth2RedirectTo> RejectOAuth2ConsentRequestAsync(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = await RejectOAuth2ConsentRequestWithHttpInfoAsync(consentChallenge, rejectOAuth2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2RedirectTo>> RejectOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->RejectOAuth2ConsentRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = rejectOAuth2Request;

            localVarRequestOptions.Operation = "OAuth2Api.RejectOAuth2ConsentRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2RedirectTo</returns>
        public OAuth2RedirectTo RejectOAuth2LoginRequest(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = RejectOAuth2LoginRequestWithHttpInfo(loginChallenge, rejectOAuth2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2RedirectTo</returns>
        public Client.Client.ApiResponse<OAuth2RedirectTo> RejectOAuth2LoginRequestWithHttpInfo(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0)
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->RejectOAuth2LoginRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = rejectOAuth2Request;

            localVarRequestOptions.Operation = "OAuth2Api.RejectOAuth2LoginRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2RedirectTo>("/admin/oauth2/auth/requests/login/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<OAuth2RedirectTo> RejectOAuth2LoginRequestAsync(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2RedirectTo> localVarResponse = await RejectOAuth2LoginRequestWithHttpInfoAsync(loginChallenge, rejectOAuth2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="rejectOAuth2Request"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2RedirectTo>> RejectOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, RejectOAuth2Request? rejectOAuth2Request = default(RejectOAuth2Request?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->RejectOAuth2LoginRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = rejectOAuth2Request;

            localVarRequestOptions.Operation = "OAuth2Api.RejectOAuth2LoginRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2RedirectTo>("/admin/oauth2/auth/requests/login/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RejectOAuth2LogoutRequest(string logoutChallenge, int operationIndex = 0)
        {
            RejectOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> RejectOAuth2LogoutRequestWithHttpInfo(string logoutChallenge, int operationIndex = 0)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->RejectOAuth2LogoutRequest");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.RejectOAuth2LogoutRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/admin/oauth2/auth/requests/logout/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectOAuth2LogoutRequestAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RejectOAuth2LogoutRequestWithHttpInfoAsync(logoutChallenge, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> RejectOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->RejectOAuth2LogoutRequest");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));

            localVarRequestOptions.Operation = "OAuth2Api.RejectOAuth2LogoutRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/admin/oauth2/auth/requests/logout/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RevokeOAuth2ConsentSessions(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0)
        {
            RevokeOAuth2ConsentSessionsWithHttpInfo(subject, varClient, all);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> RevokeOAuth2ConsentSessionsWithHttpInfo(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->RevokeOAuth2ConsentSessions");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (varClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "client", varClient));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }

            localVarRequestOptions.Operation = "OAuth2Api.RevokeOAuth2ConsentSessions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2ConsentSessionsAsync(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeOAuth2ConsentSessionsWithHttpInfoAsync(subject, varClient, all, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="varClient">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> RevokeOAuth2ConsentSessionsWithHttpInfoAsync(string subject, string? varClient = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->RevokeOAuth2ConsentSessions");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (varClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "client", varClient));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }

            localVarRequestOptions.Operation = "OAuth2Api.RevokeOAuth2ConsentSessions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RevokeOAuth2LoginSessions(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0)
        {
            RevokeOAuth2LoginSessionsWithHttpInfo(subject, sid);
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> RevokeOAuth2LoginSessionsWithHttpInfo(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0)
        {
            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (sid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "sid", sid));
            }

            localVarRequestOptions.Operation = "OAuth2Api.RevokeOAuth2LoginSessions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/oauth2/auth/sessions/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2LoginSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2LoginSessionsAsync(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeOAuth2LoginSessionsWithHttpInfoAsync(subject, sid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> RevokeOAuth2LoginSessionsWithHttpInfoAsync(string? subject = default(string?), string? sid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (sid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Client.Client.ClientUtils.ParameterToMultiMap("", "sid", sid));
            }

            localVarRequestOptions.Operation = "OAuth2Api.RevokeOAuth2LoginSessions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/oauth2/auth/sessions/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2LoginSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RevokeOAuth2Token(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0)
        {
            RevokeOAuth2TokenWithHttpInfo(token, clientId, clientSecret);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Client.Client.ApiResponse<Object> RevokeOAuth2TokenWithHttpInfo(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->RevokeOAuth2Token");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Client.Client.ClientUtils.ParameterToString(token)); // form parameter

            localVarRequestOptions.Operation = "OAuth2Api.RevokeOAuth2Token";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2TokenAsync(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeOAuth2TokenWithHttpInfoAsync(token, clientId, clientSecret, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<Object>> RevokeOAuth2TokenWithHttpInfoAsync(string token, string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->RevokeOAuth2Token");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Client.Client.ClientUtils.ParameterToString(token)); // form parameter

            localVarRequestOptions.Operation = "OAuth2Api.RevokeOAuth2Token";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        public OAuth2Client SetOAuth2Client(string id, OAuth2Client oAuth2Client, int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = SetOAuth2ClientWithHttpInfo(id, oAuth2Client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        public Client.Client.ApiResponse<OAuth2Client> SetOAuth2ClientWithHttpInfo(string id, OAuth2Client oAuth2Client, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2Client");
            }

            // verify the required parameter 'oAuth2Client' is set
            if (oAuth2Client == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'oAuth2Client' when calling OAuth2Api->SetOAuth2Client");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = oAuth2Client;

            localVarRequestOptions.Operation = "OAuth2Api.SetOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        public async System.Threading.Tasks.Task<OAuth2Client> SetOAuth2ClientAsync(string id, OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = await SetOAuth2ClientWithHttpInfoAsync(id, oAuth2Client, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2Client>> SetOAuth2ClientWithHttpInfoAsync(string id, OAuth2Client oAuth2Client, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2Client");
            }

            // verify the required parameter 'oAuth2Client' is set
            if (oAuth2Client == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'oAuth2Client' when calling OAuth2Api->SetOAuth2Client");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = oAuth2Client;

            localVarRequestOptions.Operation = "OAuth2Api.SetOAuth2Client";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Client</returns>
        public OAuth2Client SetOAuth2ClientLifespans(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = SetOAuth2ClientLifespansWithHttpInfo(id, oAuth2ClientTokenLifespans);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Client</returns>
        public Client.Client.ApiResponse<OAuth2Client> SetOAuth2ClientLifespansWithHttpInfo(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2ClientLifespans");
            }

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = oAuth2ClientTokenLifespans;

            localVarRequestOptions.Operation = "OAuth2Api.SetOAuth2ClientLifespans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OAuth2Client>("/admin/clients/{id}/lifespans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2ClientLifespans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Client</returns>
        public async System.Threading.Tasks.Task<OAuth2Client> SetOAuth2ClientLifespansAsync(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<OAuth2Client> localVarResponse = await SetOAuth2ClientLifespansWithHttpInfoAsync(id, oAuth2ClientTokenLifespans, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="oAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<OAuth2Client>> SetOAuth2ClientLifespansWithHttpInfoAsync(string id, OAuth2ClientTokenLifespans? oAuth2ClientTokenLifespans = default(OAuth2ClientTokenLifespans?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2ClientLifespans");
            }


            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = oAuth2ClientTokenLifespans;

            localVarRequestOptions.Operation = "OAuth2Api.SetOAuth2ClientLifespans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<OAuth2Client>("/admin/clients/{id}/lifespans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2ClientLifespans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrustedOAuth2JwtGrantIssuer</returns>
        public TrustedOAuth2JwtGrantIssuer TrustOAuth2JwtGrantIssuer(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0)
        {
            Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer> localVarResponse = TrustOAuth2JwtGrantIssuerWithHttpInfo(trustOAuth2JwtGrantIssuer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrustedOAuth2JwtGrantIssuer</returns>
        public Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerWithHttpInfo(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0)
        {
            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = trustOAuth2JwtGrantIssuer;

            localVarRequestOptions.Operation = "OAuth2Api.TrustOAuth2JwtGrantIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrustOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrustedOAuth2JwtGrantIssuer</returns>
        public async System.Threading.Tasks.Task<TrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerAsync(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer> localVarResponse = await TrustOAuth2JwtGrantIssuerWithHttpInfoAsync(trustOAuth2JwtGrantIssuer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrustedOAuth2JwtGrantIssuer)</returns>
        public async System.Threading.Tasks.Task<Client.Client.ApiResponse<TrustedOAuth2JwtGrantIssuer>> TrustOAuth2JwtGrantIssuerWithHttpInfoAsync(TrustOAuth2JwtGrantIssuer? trustOAuth2JwtGrantIssuer = default(TrustOAuth2JwtGrantIssuer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Client.Client.RequestOptions localVarRequestOptions = new Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = trustOAuth2JwtGrantIssuer;

            localVarRequestOptions.Operation = "OAuth2Api.TrustOAuth2JwtGrantIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrustOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
