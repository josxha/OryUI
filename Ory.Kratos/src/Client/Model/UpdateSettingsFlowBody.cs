/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Client.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Client.Model
{
    /// <summary>
    /// Update Settings Flow Request Body
    /// </summary>
    [JsonConverter(typeof(UpdateSettingsFlowBodyJsonConverter))]
    [DataContract(Name = "updateSettingsFlowBody")]
    public partial class UpdateSettingsFlowBody : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSettingsFlowBody" /> class
        /// with the <see cref="UpdateSettingsFlowWithPasswordMethod" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpdateSettingsFlowWithPasswordMethod.</param>
        public UpdateSettingsFlowBody(UpdateSettingsFlowWithPasswordMethod actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSettingsFlowBody" /> class
        /// with the <see cref="UpdateSettingsFlowWithProfileMethod" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpdateSettingsFlowWithProfileMethod.</param>
        public UpdateSettingsFlowBody(UpdateSettingsFlowWithProfileMethod actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSettingsFlowBody" /> class
        /// with the <see cref="UpdateSettingsFlowWithOidcMethod" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpdateSettingsFlowWithOidcMethod.</param>
        public UpdateSettingsFlowBody(UpdateSettingsFlowWithOidcMethod actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSettingsFlowBody" /> class
        /// with the <see cref="UpdateSettingsFlowWithTotpMethod" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpdateSettingsFlowWithTotpMethod.</param>
        public UpdateSettingsFlowBody(UpdateSettingsFlowWithTotpMethod actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSettingsFlowBody" /> class
        /// with the <see cref="UpdateSettingsFlowWithWebAuthnMethod" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpdateSettingsFlowWithWebAuthnMethod.</param>
        public UpdateSettingsFlowBody(UpdateSettingsFlowWithWebAuthnMethod actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSettingsFlowBody" /> class
        /// with the <see cref="UpdateSettingsFlowWithLookupMethod" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UpdateSettingsFlowWithLookupMethod.</param>
        public UpdateSettingsFlowBody(UpdateSettingsFlowWithLookupMethod actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(UpdateSettingsFlowWithLookupMethod))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpdateSettingsFlowWithOidcMethod))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpdateSettingsFlowWithPasswordMethod))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpdateSettingsFlowWithProfileMethod))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpdateSettingsFlowWithTotpMethod))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UpdateSettingsFlowWithWebAuthnMethod))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: UpdateSettingsFlowWithLookupMethod, UpdateSettingsFlowWithOidcMethod, UpdateSettingsFlowWithPasswordMethod, UpdateSettingsFlowWithProfileMethod, UpdateSettingsFlowWithTotpMethod, UpdateSettingsFlowWithWebAuthnMethod");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `UpdateSettingsFlowWithPasswordMethod`. If the actual instance is not `UpdateSettingsFlowWithPasswordMethod`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpdateSettingsFlowWithPasswordMethod</returns>
        public UpdateSettingsFlowWithPasswordMethod GetUpdateSettingsFlowWithPasswordMethod()
        {
            return (UpdateSettingsFlowWithPasswordMethod)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpdateSettingsFlowWithProfileMethod`. If the actual instance is not `UpdateSettingsFlowWithProfileMethod`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpdateSettingsFlowWithProfileMethod</returns>
        public UpdateSettingsFlowWithProfileMethod GetUpdateSettingsFlowWithProfileMethod()
        {
            return (UpdateSettingsFlowWithProfileMethod)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpdateSettingsFlowWithOidcMethod`. If the actual instance is not `UpdateSettingsFlowWithOidcMethod`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpdateSettingsFlowWithOidcMethod</returns>
        public UpdateSettingsFlowWithOidcMethod GetUpdateSettingsFlowWithOidcMethod()
        {
            return (UpdateSettingsFlowWithOidcMethod)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpdateSettingsFlowWithTotpMethod`. If the actual instance is not `UpdateSettingsFlowWithTotpMethod`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpdateSettingsFlowWithTotpMethod</returns>
        public UpdateSettingsFlowWithTotpMethod GetUpdateSettingsFlowWithTotpMethod()
        {
            return (UpdateSettingsFlowWithTotpMethod)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpdateSettingsFlowWithWebAuthnMethod`. If the actual instance is not `UpdateSettingsFlowWithWebAuthnMethod`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpdateSettingsFlowWithWebAuthnMethod</returns>
        public UpdateSettingsFlowWithWebAuthnMethod GetUpdateSettingsFlowWithWebAuthnMethod()
        {
            return (UpdateSettingsFlowWithWebAuthnMethod)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UpdateSettingsFlowWithLookupMethod`. If the actual instance is not `UpdateSettingsFlowWithLookupMethod`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UpdateSettingsFlowWithLookupMethod</returns>
        public UpdateSettingsFlowWithLookupMethod GetUpdateSettingsFlowWithLookupMethod()
        {
            return (UpdateSettingsFlowWithLookupMethod)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateSettingsFlowBody {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, UpdateSettingsFlowBody.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of UpdateSettingsFlowBody
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of UpdateSettingsFlowBody</returns>
        public static UpdateSettingsFlowBody FromJson(string jsonString)
        {
            UpdateSettingsFlowBody newUpdateSettingsFlowBody = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newUpdateSettingsFlowBody;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UpdateSettingsFlowWithLookupMethod).GetProperty("AdditionalProperties") == null)
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithLookupMethod>(jsonString, UpdateSettingsFlowBody.SerializerSettings));
                }
                else
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithLookupMethod>(jsonString, UpdateSettingsFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UpdateSettingsFlowWithLookupMethod");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UpdateSettingsFlowWithLookupMethod: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UpdateSettingsFlowWithOidcMethod).GetProperty("AdditionalProperties") == null)
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithOidcMethod>(jsonString, UpdateSettingsFlowBody.SerializerSettings));
                }
                else
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithOidcMethod>(jsonString, UpdateSettingsFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UpdateSettingsFlowWithOidcMethod");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UpdateSettingsFlowWithOidcMethod: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UpdateSettingsFlowWithPasswordMethod).GetProperty("AdditionalProperties") == null)
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithPasswordMethod>(jsonString, UpdateSettingsFlowBody.SerializerSettings));
                }
                else
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithPasswordMethod>(jsonString, UpdateSettingsFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UpdateSettingsFlowWithPasswordMethod");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UpdateSettingsFlowWithPasswordMethod: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UpdateSettingsFlowWithProfileMethod).GetProperty("AdditionalProperties") == null)
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithProfileMethod>(jsonString, UpdateSettingsFlowBody.SerializerSettings));
                }
                else
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithProfileMethod>(jsonString, UpdateSettingsFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UpdateSettingsFlowWithProfileMethod");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UpdateSettingsFlowWithProfileMethod: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UpdateSettingsFlowWithTotpMethod).GetProperty("AdditionalProperties") == null)
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithTotpMethod>(jsonString, UpdateSettingsFlowBody.SerializerSettings));
                }
                else
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithTotpMethod>(jsonString, UpdateSettingsFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UpdateSettingsFlowWithTotpMethod");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UpdateSettingsFlowWithTotpMethod: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UpdateSettingsFlowWithWebAuthnMethod).GetProperty("AdditionalProperties") == null)
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithWebAuthnMethod>(jsonString, UpdateSettingsFlowBody.SerializerSettings));
                }
                else
                {
                    newUpdateSettingsFlowBody = new UpdateSettingsFlowBody(JsonConvert.DeserializeObject<UpdateSettingsFlowWithWebAuthnMethod>(jsonString, UpdateSettingsFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UpdateSettingsFlowWithWebAuthnMethod");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UpdateSettingsFlowWithWebAuthnMethod: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newUpdateSettingsFlowBody;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for UpdateSettingsFlowBody
    /// </summary>
    public class UpdateSettingsFlowBodyJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(UpdateSettingsFlowBody).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return UpdateSettingsFlowBody.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return UpdateSettingsFlowBody.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
