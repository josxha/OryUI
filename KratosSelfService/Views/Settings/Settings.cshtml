@using KratosSelfService.Extensions
@model SettingsModel
@{
    Layout = "_NavbarLayout";
    ViewData["Title"] = OryTranslator.Get("settings.title");
    var allGroups = Model.flow.Ui.Nodes
        .GroupBy(node => node.Group).ToList();
    var defaultNodes = allGroups
        .First(group => group.Key == KratosUiNode.GroupEnum.Default)
        .ToArray();
    var groups = allGroups
        .Where(group => group.Key != KratosUiNode.GroupEnum.Default)
        .ToArray();
}

<div class="columns">
    <div class="column is-3 is-hidden-mobile">
        <div class="section">
            <aside>
                <p class="menu-label">@OryTranslator.Get("settings.title-navigation")</p>
                <ul class="menu-list">
                    @foreach (var group in groups)
                    {
                        var groupType = group.Key;
                        <li>
                            <a href="#@groupType.ToSiteAnchorTag()">
                                <span class="icon-text">
                                    <span class="icon">
                                        <i class="fa-solid @groupType.ToFaIcon() fa-sm"></i>
                                    </span>
                                    <span>
                                        @groupType.ToLocalNavString(OryTranslator)
                                    </span>
                                </span>
                            </a>
                        </li>
                    }
                </ul>
                @if (!string.IsNullOrWhiteSpace(Model.flow.ReturnTo))
                {
                    <p class="menu-label mt-5">@CustomTranslator.Get("Actions")</p>
                    <ul class="menu-list">
                        <li>
                            <a href="@Model.flow.ReturnTo">
                                <span class="icon-text">
                                    <span class="icon">
                                        <i class="fa-solid fa-backward fa-sm"></i>
                                    </span>
                                    <span>
                                        @OryTranslator.Get("settings.navigation-back-bu")
                                    </span>
                                </span>
                            </a>
                        </li>
                        <!--<li>
                            <a href="logout">
                                <span class="icon-text">
                                    <span class="icon">
                                        <i class="fa-solid fa-sign-out fa-sm"></i>
                                    </span>
                                    <span>
                                        @OryTranslator.Get("settings.navigation-logout")
                                    </span>
                                </span>
                            </a>
                        </li>-->
                    </ul>
                }
            </aside>
        </div>
    </div>
    <div class="column is-9">
        <div class="section">
            <div class="box pt-5">
                <h1 class="title">@OryTranslator.Get("settings.title")</h1>
                @if ((Model.flow.Ui.Messages?.Count ?? 0) == 0)
                {
                    <div class="message is-info p-3">
                        @OryTranslator.Get("settings.subtitle-instructions")
                    </div>
                }
                @await Component.InvokeAsync("KratosUiTextMessages", Model.flow.Ui.Messages)
            </div>
            @foreach (var group in groups)
            {
                <div class="box p-5" id="@group.Key.ToSiteAnchorTag()">
                    <h3 class="subtitle">
                        @group.Key.ToLocalTitleString(OryTranslator)
                    </h3>
                    <form class="mb-3" action="@Model.flow.Ui.Action" method="@Model.flow.Ui.Method">
                        @foreach (var node in defaultNodes)
                        {
                            var model = new KratosUiNodeArgs(node, FlowType.Settings);
                            @await Component.InvokeAsync("KratosUiNodeComponent", model)
                        }
                        @foreach (var node in group)
                        {
                            var model = new KratosUiNodeArgs(node, FlowType.Settings);
                            @await Component.InvokeAsync("KratosUiNodeComponent", model)
                        }
                    </form>
                </div>
            }
        </div>
    </div>
</div>