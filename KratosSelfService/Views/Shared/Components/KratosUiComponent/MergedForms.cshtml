@model KratosUiModel

<form class="mb-3" action="@Model.ui.Action" method="@Model.ui.Method" id="loginForm">
    @foreach (var node in Model.defaultGroup)
    {
        @await Component.InvokeAsync("KratosUiNodeComponent", new KratosUiNodeArgs(
            node, Model.flowType, Model.forgotPasswordUrl))
    }
    @foreach (var (nodeGroup, nodes) in Model.nodeGroups)
    {
        @if (nodes.Count == 1)
        {
            @await Component.InvokeAsync("KratosUiNodeComponent", new KratosUiNodeArgs(
                nodes.First(), Model.flowType, Model.forgotPasswordUrl))
        }
        else
        {
            <div class="field" id="method-@nodeGroup">
                <button class="button is-info is-fullwidth" type="button" onclick="setGroup('@nodeGroup')">
                    Use @nodeGroup
                </button>
            </div>
        }
    }
</form>

<script type="text/javascript">
      const enabledGroups = [
          @Html.Raw(string.Join(", ", Model.nodeGroups.Keys
              .Where(group => Model.nodeGroups[group].Count > 1)
              .Select(group => $"\'{group}\'")))
      ];

    function setGroup(selectedGroup) {
      const form = document.getElementById("loginForm");
        
      // hide all groups
      for (let group in enabledGroups) {
        document.getElementById("method-" + selectedGroup)?.remove();
      }
    }
</script>