/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Client.Client.OpenAPIDateConverter;

namespace Client.Model
{
    /// <summary>
    /// ContinueWithVerificationUiFlow
    /// </summary>
    [DataContract(Name = "continueWithVerificationUiFlow")]
    public partial class ContinueWithVerificationUiFlow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContinueWithVerificationUiFlow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContinueWithVerificationUiFlow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContinueWithVerificationUiFlow" /> class.
        /// </summary>
        /// <param name="id">The ID of the verification flow (required).</param>
        /// <param name="url">The URL of the verification flow.</param>
        /// <param name="verifiableAddress">The address that should be verified in this flow (required).</param>
        public ContinueWithVerificationUiFlow(string id = default(string), string url = default(string), string verifiableAddress = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ContinueWithVerificationUiFlow and cannot be null");
            }
            this.Id = id;
            // to ensure "verifiableAddress" is required (not null)
            if (verifiableAddress == null)
            {
                throw new ArgumentNullException("verifiableAddress is a required property for ContinueWithVerificationUiFlow and cannot be null");
            }
            this.VerifiableAddress = verifiableAddress;
            this.Url = url;
        }

        /// <summary>
        /// The ID of the verification flow
        /// </summary>
        /// <value>The ID of the verification flow</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The URL of the verification flow
        /// </summary>
        /// <value>The URL of the verification flow</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The address that should be verified in this flow
        /// </summary>
        /// <value>The address that should be verified in this flow</value>
        [DataMember(Name = "verifiable_address", IsRequired = true, EmitDefaultValue = true)]
        public string VerifiableAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContinueWithVerificationUiFlow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VerifiableAddress: ").Append(VerifiableAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
