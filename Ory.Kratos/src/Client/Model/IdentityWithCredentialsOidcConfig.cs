/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Client.Client.OpenAPIDateConverter;

namespace Client.Model
{
    /// <summary>
    /// IdentityWithCredentialsOidcConfig
    /// </summary>
    [DataContract(Name = "identityWithCredentialsOidcConfig")]
    public partial class IdentityWithCredentialsOidcConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityWithCredentialsOidcConfig" /> class.
        /// </summary>
        /// <param name="config">config.</param>
        /// <param name="providers">A list of OpenID Connect Providers.</param>
        public IdentityWithCredentialsOidcConfig(IdentityWithCredentialsPasswordConfig config = default(IdentityWithCredentialsPasswordConfig), List<IdentityWithCredentialsOidcConfigProvider> providers = default(List<IdentityWithCredentialsOidcConfigProvider>))
        {
            this.Config = config;
            this.Providers = providers;
        }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public IdentityWithCredentialsPasswordConfig Config { get; set; }

        /// <summary>
        /// A list of OpenID Connect Providers
        /// </summary>
        /// <value>A list of OpenID Connect Providers</value>
        [DataMember(Name = "providers", EmitDefaultValue = false)]
        public List<IdentityWithCredentialsOidcConfigProvider> Providers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityWithCredentialsOidcConfig {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
