/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Hydra.Client.Client.OpenAPIDateConverter;

namespace Ory.Hydra.Client.Model
{
    /// <summary>
    /// Contains a redirect URL used to complete a login, consent, or logout request.
    /// </summary>
    [DataContract(Name = "oAuth2RedirectTo")]
    public partial class OAuth2RedirectTo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2RedirectTo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OAuth2RedirectTo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2RedirectTo" /> class.
        /// </summary>
        /// <param name="redirectTo">RedirectURL is the URL which you should redirect the user&#39;s browser to once the authentication process is completed. (required).</param>
        public OAuth2RedirectTo(string redirectTo = default(string))
        {
            // to ensure "redirectTo" is required (not null)
            if (redirectTo == null)
            {
                throw new ArgumentNullException("redirectTo is a required property for OAuth2RedirectTo and cannot be null");
            }
            this.RedirectTo = redirectTo;
        }

        /// <summary>
        /// RedirectURL is the URL which you should redirect the user&#39;s browser to once the authentication process is completed.
        /// </summary>
        /// <value>RedirectURL is the URL which you should redirect the user&#39;s browser to once the authentication process is completed.</value>
        [DataMember(Name = "redirect_to", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuth2RedirectTo {\n");
            sb.Append("  RedirectTo: ").Append(RedirectTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
