@model LoginModel
@{
    ViewData["Title"] = OryTranslator.Get("login.title");
    Layout = "_CardLayout";
    var is2Fa = Model.flow.Ui.Messages?.All(text => text.Id == 1010004) ?? false;
}

<h1 class="title has-text-centered">@OryTranslator.Get("login.title")</h1>
@if (is2Fa)
{
    <p class="has-text-centered mt-3">
        @OryTranslator.Get("login.logout-label") <a href="">@OryTranslator.Get("login.logout-button")</a>
    </p>
}
else
{
    <p class="has-text-centered">
        @OryTranslator.Get("login.registration-label")
        <a href="@Model.signupUrl">
            @OryTranslator.Get("login.registration-button")
        </a>
    </p>
}
<hr/>
<div class="mb-2">
    @await Component.InvokeAsync("KratosUiTextMessages", Model.flow.Ui.Messages)

    @await Component.InvokeAsync("KratosUiComponent", new KratosUiArgs(
        Model.flow.Ui,
        FlowType.Login,
        hiddenGroups: [KratosUiNode.GroupEnum.Oidc],
        forgotPasswordUrl: Model.forgotPasswordUrl))
</div>

@if (!is2Fa)
{
    var nodes = Model.flow.Ui.Nodes.Where(node => node.Group == KratosUiNode.GroupEnum.Oidc);
    <div class="field separator">@CustomTranslator.Get("login.signInWithProvider")</div>
    <form class="mb-3" action="@Model.flow.Ui.Action" method="@Model.flow.Ui.Method">
        <div class="field">
            <div class="columns is-mobile is-multiline">
                @foreach (var node in nodes)
                {
                    @await Component.InvokeAsync("KratosUiNodeComponent", new KratosUiNodeArgs(
                        node, FlowType.Login, Model.forgotPasswordUrl))
                }
            </div>
        </div>
    </form>
}