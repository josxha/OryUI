/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Client.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Client.Model
{
    /// <summary>
    /// UiNodeAttributes
    /// </summary>
    [JsonConverter(typeof(UiNodeAttributesJsonConverter))]
    [DataContract(Name = "uiNodeAttributes")]
    public partial class UiNodeAttributes : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UiNodeAttributes" /> class
        /// with the <see cref="UiNodeInputAttributes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UiNodeInputAttributes.</param>
        public UiNodeAttributes(UiNodeInputAttributes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UiNodeAttributes" /> class
        /// with the <see cref="UiNodeTextAttributes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UiNodeTextAttributes.</param>
        public UiNodeAttributes(UiNodeTextAttributes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UiNodeAttributes" /> class
        /// with the <see cref="UiNodeImageAttributes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UiNodeImageAttributes.</param>
        public UiNodeAttributes(UiNodeImageAttributes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UiNodeAttributes" /> class
        /// with the <see cref="UiNodeAnchorAttributes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UiNodeAnchorAttributes.</param>
        public UiNodeAttributes(UiNodeAnchorAttributes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UiNodeAttributes" /> class
        /// with the <see cref="UiNodeScriptAttributes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UiNodeScriptAttributes.</param>
        public UiNodeAttributes(UiNodeScriptAttributes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(UiNodeAnchorAttributes))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UiNodeImageAttributes))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UiNodeInputAttributes))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UiNodeScriptAttributes))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UiNodeTextAttributes))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: UiNodeAnchorAttributes, UiNodeImageAttributes, UiNodeInputAttributes, UiNodeScriptAttributes, UiNodeTextAttributes");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `UiNodeInputAttributes`. If the actual instance is not `UiNodeInputAttributes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UiNodeInputAttributes</returns>
        public UiNodeInputAttributes GetUiNodeInputAttributes()
        {
            return (UiNodeInputAttributes)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UiNodeTextAttributes`. If the actual instance is not `UiNodeTextAttributes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UiNodeTextAttributes</returns>
        public UiNodeTextAttributes GetUiNodeTextAttributes()
        {
            return (UiNodeTextAttributes)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UiNodeImageAttributes`. If the actual instance is not `UiNodeImageAttributes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UiNodeImageAttributes</returns>
        public UiNodeImageAttributes GetUiNodeImageAttributes()
        {
            return (UiNodeImageAttributes)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UiNodeAnchorAttributes`. If the actual instance is not `UiNodeAnchorAttributes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UiNodeAnchorAttributes</returns>
        public UiNodeAnchorAttributes GetUiNodeAnchorAttributes()
        {
            return (UiNodeAnchorAttributes)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UiNodeScriptAttributes`. If the actual instance is not `UiNodeScriptAttributes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UiNodeScriptAttributes</returns>
        public UiNodeScriptAttributes GetUiNodeScriptAttributes()
        {
            return (UiNodeScriptAttributes)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UiNodeAttributes {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, UiNodeAttributes.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of UiNodeAttributes
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of UiNodeAttributes</returns>
        public static UiNodeAttributes FromJson(string jsonString)
        {
            UiNodeAttributes newUiNodeAttributes = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newUiNodeAttributes;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UiNodeAnchorAttributes).GetProperty("AdditionalProperties") == null)
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeAnchorAttributes>(jsonString, UiNodeAttributes.SerializerSettings));
                }
                else
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeAnchorAttributes>(jsonString, UiNodeAttributes.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UiNodeAnchorAttributes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UiNodeAnchorAttributes: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UiNodeImageAttributes).GetProperty("AdditionalProperties") == null)
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeImageAttributes>(jsonString, UiNodeAttributes.SerializerSettings));
                }
                else
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeImageAttributes>(jsonString, UiNodeAttributes.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UiNodeImageAttributes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UiNodeImageAttributes: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UiNodeInputAttributes).GetProperty("AdditionalProperties") == null)
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeInputAttributes>(jsonString, UiNodeAttributes.SerializerSettings));
                }
                else
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeInputAttributes>(jsonString, UiNodeAttributes.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UiNodeInputAttributes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UiNodeInputAttributes: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UiNodeScriptAttributes).GetProperty("AdditionalProperties") == null)
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeScriptAttributes>(jsonString, UiNodeAttributes.SerializerSettings));
                }
                else
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeScriptAttributes>(jsonString, UiNodeAttributes.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UiNodeScriptAttributes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UiNodeScriptAttributes: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UiNodeTextAttributes).GetProperty("AdditionalProperties") == null)
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeTextAttributes>(jsonString, UiNodeAttributes.SerializerSettings));
                }
                else
                {
                    newUiNodeAttributes = new UiNodeAttributes(JsonConvert.DeserializeObject<UiNodeTextAttributes>(jsonString, UiNodeAttributes.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UiNodeTextAttributes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UiNodeTextAttributes: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newUiNodeAttributes;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for UiNodeAttributes
    /// </summary>
    public class UiNodeAttributesJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(UiNodeAttributes).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return UiNodeAttributes.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return UiNodeAttributes.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
