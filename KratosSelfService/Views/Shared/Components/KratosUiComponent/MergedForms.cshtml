@model KratosUiModel

<form class="mb-3" action="@Model.ui.Action" method="@Model.ui.Method">
    @foreach (var node in Model.defaultGroup)
    {
        @await Component.InvokeAsync("KratosUiNodeComponent", new KratosUiNodeArgs(
            node, Model.flowType, Model.forgotPasswordUrl))
    }
    @foreach (var (nodeGroup, nodes) in Model.nodeGroups)
    {
        <div id="method-@nodeGroup" class="is-hidden">
            @foreach (var node in nodes)
            {
                @await Component.InvokeAsync("KratosUiNodeComponent", new KratosUiNodeArgs(
                    node, Model.flowType, Model.forgotPasswordUrl))
            }
        </div>
        @if (nodes.Count == 1)
        {
            @await Component.InvokeAsync("KratosUiNodeComponent", new KratosUiNodeArgs(
                nodes.First(), Model.flowType, Model.forgotPasswordUrl))
        }
        else
        {
            <div class="field">
                <button class="button is-info is-fullwidth" type="button" onclick="setGroup('@nodeGroup')">
                    Use @nodeGroup
                </button>
            </div>
        }
    }
</form>

<script type="text/javascript">
    function setGroup(selectedGroup) {
      const enabledGroups = [
          @Html.Raw(string.Join(", ", Model.nodeGroups.Keys
              .Where(group => Model.nodeGroups[group].Count > 1)
              .Select(group => $"\'{group}\'")))
      ];

      // hide all groups
      for (let group in enabledGroups) {
        let div = document.getElementById("method-" + selectedGroup);
        if (div !== null) div.classList.remove("is-hidden");
      }
      // show selected group
      if (selectedGroup !== null) {
          let div = document.getElementById("method-" + selectedGroup);
          div.classList.remove("is-hidden");
      }
    }
</script>